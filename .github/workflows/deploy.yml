name: Deploy

on:
  push:
    branches: [main]
    tags:
      - "v*"
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy to"
        required: true
        type: choice
        options:
          - staging
          - production

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for backend
        id: meta-backend
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}/backend
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha

      - name: Check if Dockerfile.backend exists
        id: check-backend-dockerfile
        run: |
          if [ -f "Dockerfile.backend" ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Build and push backend
        if: steps.check-backend-dockerfile.outputs.exists == 'true'
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.backend
          push: true
          tags: ${{ steps.meta-backend.outputs.tags }}
          labels: ${{ steps.meta-backend.outputs.labels }}
          cache-from: type=registry,ref=ghcr.io/${{ github.repository }}/backend:buildcache
          cache-to: type=registry,ref=ghcr.io/${{ github.repository }}/backend:buildcache,mode=max

      - name: Extract metadata for frontend
        id: meta-frontend
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}/frontend
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha

      - name: Check if frontend Dockerfile exists
        id: check-frontend-dockerfile
        run: |
          if [ -f "apps/delphes/frontend/Dockerfile" ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Build and push frontend
        if: steps.check-frontend-dockerfile.outputs.exists == 'true'
        uses: docker/build-push-action@v5
        with:
          context: ./apps/delphes/frontend
          file: ./apps/delphes/frontend/Dockerfile
          push: true
          tags: ${{ steps.meta-frontend.outputs.tags }}
          labels: ${{ steps.meta-frontend.outputs.labels }}
          cache-from: type=registry,ref=ghcr.io/${{ github.repository }}/frontend:buildcache
          cache-to: type=registry,ref=ghcr.io/${{ github.repository }}/frontend:buildcache,mode=max

  deploy-staging:
    runs-on: ubuntu-latest
    needs: [build-and-push]
    if: github.ref == 'refs/heads/main' || github.event.inputs.environment == 'staging'
    environment:
      name: staging
      url: https://staging.trusted-services.example.com

    steps:
      - uses: actions/checkout@v4

      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          # Add your deployment commands here
          # Example: kubectl, helm, ssh commands, etc.

      - name: Run post-deployment smoke tests
        run: |
          pip install pytest httpx
          pytest tests/smoke/test_backend_api.py -v --base-url=https://staging.trusted-services.example.com

  deploy-production:
    runs-on: ubuntu-latest
    needs: [build-and-push, deploy-staging]
    if: startsWith(github.ref, 'refs/tags/v') || github.event.inputs.environment == 'production'
    environment:
      name: production
      url: https://trusted-services.example.com

    steps:
      - uses: actions/checkout@v4

      - name: Deploy to production
        run: |
          echo "Deploying to production environment..."
          # Add your deployment commands here

      - name: Run post-deployment smoke tests
        run: |
          pip install pytest httpx
          pytest tests/smoke/test_backend_api.py -v --base-url=https://trusted-services.example.com

      - name: Notify deployment
        if: success()
        run: |
          echo "Production deployment successful!"
          # Add notification logic (Slack, email, etc.)
